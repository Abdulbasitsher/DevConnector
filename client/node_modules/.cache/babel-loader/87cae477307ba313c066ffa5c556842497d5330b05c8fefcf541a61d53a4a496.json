{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL } from './types';\nimport { showAlert } from './alert'; // ✅ fixed name\n\n// Register User\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data // should include { token: ... }\n    });\n  } catch (err) {\n    var _err$response, _err$response$data;\n    const errors = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(showAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","showAlert","register","name","email","password","dispatch","config","headers","body","JSON","stringify","res","post","type","payload","data","err","_err$response","_err$response$data","errors","response","forEach","error","msg"],"sources":["C:/Users/abasi/OneDrive/Desktop/MERN stack preparation/Full-Stack-Projects/DevConnector/client/src/actions/auth.js"],"sourcesContent":["import axios from 'axios';\r\nimport { REGISTER_SUCCESS, REGISTER_FAIL } from './types';\r\nimport { showAlert } from './alert';  // ✅ fixed name\r\n\r\n// Register User\r\nexport const register = ({ name, email, password }) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ name, email, password });\r\n\r\n  try {\r\n    const res = await axios.post('/api/users', body, config);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data, // should include { token: ... }\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response?.data?.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(showAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n    });\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,EAAEC,aAAa,QAAQ,SAAS;AACzD,SAASC,SAAS,QAAQ,SAAS,CAAC,CAAE;;AAEtC;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK,MAAOC,QAAQ,IAAK;EACzE,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC;EAED,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAER,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,CAAC;EAEtD,IAAI;IACF,MAAMO,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAC,YAAY,EAAEJ,IAAI,EAAEF,MAAM,CAAC;IAExDD,QAAQ,CAAC;MACPQ,IAAI,EAAEf,gBAAgB;MACtBgB,OAAO,EAAEH,GAAG,CAACI,IAAI,CAAE;IACrB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IAAA,IAAAC,aAAA,EAAAC,kBAAA;IACZ,MAAMC,MAAM,IAAAF,aAAA,GAAGD,GAAG,CAACI,QAAQ,cAAAH,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcF,IAAI,cAAAG,kBAAA,uBAAlBA,kBAAA,CAAoBC,MAAM;IACzC,IAAIA,MAAM,EAAE;MACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKjB,QAAQ,CAACL,SAAS,CAACsB,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACrE;IAEAlB,QAAQ,CAAC;MACPQ,IAAI,EAAEd;IACR,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}